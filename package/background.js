// Generated by CoffeeScript 1.9.0
(function() {
  var cacheDecisionPoint, cacheService, cacheUserVote, checkIfCurrentVersionOfApiServicePointIsInServicesCache, clearServiceCache, getPointsToVoteOn, initIfNewURL, initialize, messageMainView_noServiceMatch, popupOpen, popupParcel, reactor, refreshBadge, sendParcel, serviceMatchObj, servicesIndexAndServicesFullReady, servicesReady, tabUrl, updateBadgeText, updateMainViewData, updateService, updateServicesIndex, updatesCountTest,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  tabUrl = '';

  serviceMatchObj = {};

  updatesCountTest = 0;

  popupOpen = false;

  popupParcel = {};

  sendParcel = function(parcel) {
    var outPort;
    outPort = chrome.extension.connect({
      name: "fromBackgroundToPopup"
    });
    if ((parcel.msg == null) || (parcel.forUrl == null)) {
      return false;
    }
    switch (parcel.msg) {
      case 'popupParcel_ready':
        refreshBadge(parcel.popupParcel);
        return outPort.postMessage(parcel);
      case 'noServiceMatch':
        return outPort.postMessage(parcel);
    }
  };

  updateMainViewData = function(pointsToVoteOn, nullOrCachedServices, servicesFull, serviceName, forUrl) {
    var sendObj;
    popupParcel = {
      'pointsToVoteOn': pointsToVoteOn,
      'nullOrCachedServices': nullOrCachedServices,
      'servicesFull': servicesFull,
      'serviceName': serviceName
    };
    if (popupOpen) {
      sendObj = {
        'popupParcel': popupParcel,
        'forUrl': forUrl,
        'msg': 'popupParcel_ready'
      };
      return sendParcel(sendObj);
    } else {
      return refreshBadge(popupParcel);
    }
  };

  messageMainView_noServiceMatch = function(forUrl) {
    var sendObj;
    sendObj = {
      'forUrl': forUrl,
      'msg': 'noServiceMatch'
    };
    return sendParcel(sendObj);
  };

  cacheService = function(servicesCache, servicesFull, serviceName, currentTime, callback) {
    if (servicesCache[serviceName] == null) {
      servicesCache[serviceName] = {};
      servicesCache[serviceName].canonicalTimestamp = currentTime;
      servicesCache[serviceName].canonical = {};
      if (servicesFull[serviceName].service.links != null) {
        servicesCache[serviceName].canonical.links = servicesFull[serviceName].service.links;
      }
      if (servicesFull[serviceName].service.twitter != null) {
        servicesCache[serviceName].canonical.twitter = servicesFull[serviceName].service.twitter;
      }
      servicesCache[serviceName].decisionPoints = {};
      servicesCache[serviceName].sharedTotalResults = [];
    } else if ((currentTime - servicesCache[serviceName].canonicalTimestamp) < 86400000) {
      servicesCache[serviceName].canonicalTimestamp = currentTime;
      servicesCache[serviceName].canonical = {};
      if (servicesFull[serviceName].service.links != null) {
        servicesCache[serviceName].canonical.links = servicesFull[serviceName].service.links;
      }
      if (servicesFull[serviceName].service.twitter != null) {
        servicesCache[serviceName].canonical.twitter = servicesFull[serviceName].service.twitter;
      }
    }
    return chrome.storage.local.set({
      'servicesCache': servicesCache
    }, function() {
      return callback(servicesCache);
    });
  };

  cacheDecisionPoint = function(servicesCache, servicesFull, serviceName, userAgreedBool, pointId, currentTime, callback) {
    var canonical, rawPointData, setObj;
    if ((servicesCache[serviceName] != null) && (servicesFull[serviceName] != null) && (servicesFull[serviceName].service.pointsData[pointId] != null)) {
      if (servicesCache[serviceName].decisionPoints[pointId] == null) {
        servicesCache[serviceName].decisionPoints[pointId] = [];
      }
      rawPointData = servicesFull[serviceName].service.pointsData[pointId];
      canonical = {
        id: pointId,
        title: rawPointData.title
      };
      if ((rawPointData.tosdr != null) && (rawPointData.tosdr.tldr != null)) {
        canonical['tldr'] = rawPointData.tosdr.tldr;
      }
      if (rawPointData.meta != null) {
        canonical['meta'] = rawPointData.meta;
      }
      if (rawPointData.source != null) {
        canonical.source = rawPointData.source;
      }
      if (rawPointData.discussion != null) {
        canonical.discussion = rawPointData.discussion;
      }
      setObj = {
        'canonical': canonical,
        'timestamp': currentTime,
        'voteAgree': userAgreedBool,
        'deleted': false,
        'shared': []
      };
      servicesCache[serviceName].decisionPoints[pointId].push(setObj);
      return chrome.storage.local.set({
        'servicesCache': servicesCache
      }, function() {
        return callback(servicesCache, serviceName, pointId);
      });
    }
  };

  cacheUserVote = function(userAgreedBool, serviceName, pointId) {
    var currentTime;
    currentTime = Date.now();
    return chrome.storage.local.get('servicesFull', function(response) {
      var servicesFull;
      if ((response.servicesFull == null) || Object.keys(response.servicesFull).length === 0) {
        return false;
      }
      servicesFull = response.servicesFull;
      if ((servicesFull[serviceName] != null) && (servicesFull[serviceName].service.pointsData[pointId] != null)) {
        return chrome.storage.local.get('servicesCache', function(_r) {
          var servicesCache;
          if ((_r.servicesCache == null) || Object.keys(_r.servicesCache).length === 0 || (_r.servicesCache[serviceName] == null) || ((currentTime - _r.servicesCache[serviceName].canonicalTimestamp) < 86400000)) {
            if (_r.servicesCache == null) {
              servicesCache = {};
            } else {
              servicesCache = _r.servicesCache;
            }
            return cacheService(servicesCache, servicesFull, serviceName, currentTime, function(_servicesCache) {
              return cacheDecisionPoint(_servicesCache, servicesFull, serviceName, userAgreedBool, pointId, currentTime, function(__servicesCache, _serviceName, _pointId) {
                return getPointsToVoteOn(servicesFull, serviceName, function(pointsToVoteOn, nullOrCachedServices) {
                  var setObj;
                  setObj = {};
                  setObj.msg = 'popupParcel_ready';
                  setObj.forUrl = tabUrl;
                  setObj.popupParcel = {
                    'serviceName': _serviceName,
                    'pointId': _pointId,
                    'forUrl': tabUrl,
                    'servicesFull': servicesFull,
                    'pointsToVoteOn': pointsToVoteOn,
                    'nullOrCachedServices': nullOrCachedServices
                  };
                  popupParcel = setObj.popupParcel;
                  return sendParcel(setObj);
                });
              });
            });
          } else {
            return cacheDecisionPoint(_r.servicesCache, servicesFull, serviceName, userAgreedBool, pointId, currentTime, function(__servicesCache, _serviceName, _pointId) {
              return getPointsToVoteOn(servicesFull, serviceName, function(pointsToVoteOn, nullOrCachedServices) {
                var setObj;
                setObj = {};
                setObj.msg = 'popupParcel_ready';
                setObj.forUrl = tabUrl;
                setObj.popupParcel = {
                  'serviceName': _serviceName,
                  'pointId': _pointId,
                  'forUrl': tabUrl,
                  'servicesFull': servicesFull,
                  'pointsToVoteOn': pointsToVoteOn,
                  'nullOrCachedServices': nullOrCachedServices
                };
                popupParcel = setObj.popupParcel;
                return sendParcel(setObj);
              });
            });
          }
        });
      }
    });
  };

  clearServiceCache = function(serviceName) {
    return chrome.storage.local.get('servicesCache', function(_r) {
      if ((_r.servicesCache == null) || Object.keys(_r.servicesCache).length === 0 || (_r.servicesCache[serviceName] == null)) {
        return false;
      } else {
        delete _r.servicesCache[serviceName];
        return chrome.storage.local.set({
          'servicesCache': _r.servicesCache
        }, function() {
          return chrome.tabs.getSelected(null, function(tab) {
            var setObj;
            setObj = {};
            setObj.msg = 'popupParcel_ready';
            setObj.forUrl = tabUrl;
            if (popupParcel != null) {
              setObj.popupParcel = popupParcel;
              setObj.popupParcel.pointsToVoteOn = popupParcel.servicesFull[serviceName].service.pointsData;
              setObj.popupParcel.nullOrCachedServices = _r.servicesCache;
              popupParcel = setObj.popupParcel;
              return sendParcel(setObj);
            }
          });
        });
      }
    });
  };

  chrome.extension.onConnect.addListener(function(port) {
    if (port.name === 'fromPopupToBackground') {
      return port.onMessage.addListener(function(dataFromPopup) {
        var sendObj;
        if (dataFromPopup.msg == null) {
          return false;
        }
        switch (dataFromPopup.msg) {
          case 'post_clearService':
            return clearServiceCache(dataFromPopup.serviceName);
          case 'post_userVote':
            if (dataFromPopup.forUrl === tabUrl) {
              return cacheUserVote(dataFromPopup.userAgreedBool, dataFromPopup.serviceName, dataFromPopup.pointId);
            }
            break;
          case 'request_popupParcel':
            popupOpen = true;
            if (tabUrl === serviceMatchObj.forUrl && serviceMatchObj.serviceMatch === false) {
              return messageMainView_noServiceMatch(tabUrl);
            } else if (Object.keys(popupParcel).length > 0 && tabUrl === dataFromPopup.forUrl) {
              sendObj = {
                'popupParcel': popupParcel,
                'forUrl': tabUrl,
                'msg': 'popupParcel_ready'
              };
              return sendParcel(sendObj);
            } else if (tabUrl === dataFromPopup.forUrl) {
              sendObj = {
                'msg': 'popupParcel_pending',
                'forUrl': tabUrl
              };
              return sendParcel(sendObj);
            } else {
              return messageMainView_noServiceMatch(tabUrl);
            }
        }
      });
    }
  });

  reactor = new bReactor();

  reactor.registerEvent('deliverServices');

  reactor.addEventListener('deliverServices', function(ingredientObj) {
    if ((ingredientObj.forUrl != null) && ingredientObj.forUrl === tabUrl) {
      return servicesReady(ingredientObj.services, ingredientObj.forUrl);
    }
  });

  checkIfCurrentVersionOfApiServicePointIsInServicesCache = function(serviceApiPointsObject, cachedPoints, pointId) {
    var _i;
    _i = cachedPoints[pointId].length - 1;
    if ((serviceApiPointsObject[pointId].meta != null) || (cachedPoints[pointId][_i].canonical.meta != null)) {
      if ((serviceApiPointsObject[pointId].meta != null) && (cachedPoints[pointId][_i].canonical.meta != null)) {
        if (!_.isEqual(serviceApiPointsObject[pointId].meta, cachedPoints[pointId][_i].canonical.meta)) {
          return false;
        }
      } else {
        return false;
      }
    }
    if ((serviceApiPointsObject[pointId].source != null) || (cachedPoints[pointId][_i].canonical.source != null)) {
      if ((serviceApiPointsObject[pointId].source != null) && (cachedPoints[pointId][_i].canonical.source != null)) {
        if (!_.isEqual(serviceApiPointsObject[pointId].source, cachedPoints[pointId][_i].canonical.source)) {
          return false;
        }
      } else {
        return false;
      }
    }
    if ((serviceApiPointsObject[pointId].title != null) || (cachedPoints[pointId][_i].canonical.title != null)) {
      if ((serviceApiPointsObject[pointId].title != null) && (cachedPoints[pointId][_i].canonical.title != null)) {
        if (!_.isEqual(serviceApiPointsObject[pointId].title, cachedPoints[pointId][_i].canonical.title)) {
          return false;
        }
      } else {
        return false;
      }
    } else if (cachedPoints[pointId][_i].canonical.title == null) {
      return false;
    }
    if ((serviceApiPointsObject[pointId].tosdr.tldr != null) || (cachedPoints[pointId][_i].canonical.tldr != null)) {
      if ((serviceApiPointsObject[pointId].tosdr.tldr != null) && (cachedPoints[pointId][_i].canonical.tldr != null)) {
        if (!_.isEqual(serviceApiPointsObject[pointId].tosdr.tldr, cachedPoints[pointId][_i].canonical.tldr)) {
          return false;
        }
      } else {
        return false;
      }
    } else if (cachedPoints[pointId][_i].canonical.tldr == null) {
      return false;
    }
    return true;
  };

  getPointsToVoteOn = function(servicesFull, serviceName, callback) {
    var service, serviceApiPointsObject;
    service = servicesFull[serviceName].service;
    serviceApiPointsObject = _.extend({}, service.pointsData);
    return chrome.storage.local.get('servicesCache', function(response) {
      var apiPointIds, decisionPoint, pointId, _ref;
      apiPointIds = Object.keys(servicesFull[serviceName].service.pointsData);
      if (response.servicesCache != null) {
        if (response.servicesCache[serviceName] != null) {
          _ref = response.servicesCache[serviceName].decisionPoints;
          for (pointId in _ref) {
            decisionPoint = _ref[pointId];
            if (__indexOf.call(apiPointIds, pointId) >= 0) {
              if (checkIfCurrentVersionOfApiServicePointIsInServicesCache(serviceApiPointsObject, response.servicesCache[serviceName].decisionPoints, pointId)) {
                delete serviceApiPointsObject[pointId];
              }
            }
          }
          return callback(serviceApiPointsObject, response.servicesCache);
        } else {
          return callback(serviceApiPointsObject, response.servicesCache);
        }
      } else {
        return callback(serviceApiPointsObject, null);
      }
    });
  };

  updateBadgeText = function(text) {
    return chrome.browserAction.setBadgeText({
      'text': text.toString()
    });
  };

  servicesIndexAndServicesFullReady = function(servicesIndex, servicesFull, serviceName, forUrl) {
    if (servicesFull[serviceName] != null) {
      serviceMatchObj = {
        forUrl: forUrl,
        serviceMatch: true
      };
      return getPointsToVoteOn(servicesFull, serviceName, function(pointsToVoteOn, nullOrCachedServices) {
        if (forUrl === tabUrl) {
          return updateMainViewData(pointsToVoteOn, nullOrCachedServices, servicesFull, serviceName, forUrl);
        }
      });
    } else {
      return serviceMatchObj = {
        forUrl: forUrl,
        serviceMatch: false
      };
    }
  };

  updateServicesIndex = function(currentUrl) {
    var timestamp;
    timestamp = Date.now();
    return $.ajax('https://tosdr.org/index/services.json', {
      success: function(servicesIndex) {
        var getVanity, name, serviceNamesArray, setObj, vanityHash, _j, _len;
        if (servicesIndex['world-of-warcraft'] != null) {
          delete servicesIndex['world-of-warcraft'];
        }
        if (servicesIndex['microsoft-store'] != null) {
          servicesIndex['microsoftstore'] = servicesIndex['microsoft-store'];
          delete servicesIndex['microsoft-store'];
        }
        if (servicesIndex['apple-icloud'] != null) {
          servicesIndex['icloud'] = servicesIndex['apple-icloud'];
          delete servicesIndex['apple-icloud'];
        }
        if (servicesIndex['mint.com'] != null) {
          servicesIndex['mint'] = servicesIndex['mint.com'];
          delete servicesIndex['mint.com'];
        }
        serviceNamesArray = Object.keys(servicesIndex);
        getVanity = function(name) {
          var fragments;
          fragments = name.split('-');
          if (fragments.length === 1) {
            return fragments[0];
          } else {
            return fragments[fragments.length - 2];
          }
        };
        vanityHash = {};
        for (_j = 0, _len = serviceNamesArray.length; _j < _len; _j++) {
          name = serviceNamesArray[_j];
          vanityHash[getVanity(name)] = name;
        }
        setObj = {
          vanityHash: vanityHash,
          timestamp: timestamp
        };
        return chrome.storage.local.set({
          'services': setObj
        }, function(services) {
          return reactor.dispatchEvent('deliverServices', {
            'services': setObj,
            'forUrl': currentUrl
          });
        });
      }
    });
  };

  updateService = function(servicesFullObject, serviceName, currentUrl, callback, servicesIndex) {
    var timestamp;
    if (servicesFullObject == null) {
      servicesFullObject = {};
    }
    if (servicesIndex == null) {
      servicesIndex = null;
    }
    timestamp = Date.now();
    return $.getJSON("https://tosdr.org/api/1/service/" + serviceName + ".json").done(function(serviceFull) {
      var setObj;
      setObj = {
        service: serviceFull,
        timestamp: timestamp
      };
      servicesFullObject[serviceName] = setObj;
      return chrome.storage.local.set({
        'servicesFull': servicesFullObject
      }, function() {
        if (servicesIndex != null) {
          return callback(servicesIndex, servicesFullObject, serviceName, currentUrl);
        } else {
          return callback(servicesFullObject, serviceName, currentUrl);
        }
      });
    });
  };

  refreshBadge = function(popupParcel) {
    var decisionPointsArray, pointName, totalCount, voteYesCount, _ref;
    if (Object.keys(popupParcel.pointsToVoteOn).length > 0) {
      return updateBadgeText(Object.keys(popupParcel.pointsToVoteOn).length);
    } else if ((popupParcel.nullOrCachedServices[popupParcel.serviceName] != null) && (popupParcel.nullOrCachedServices[popupParcel.serviceName].decisionPoints != null) && Object.keys(popupParcel.nullOrCachedServices[popupParcel.serviceName].decisionPoints).length > 0) {
      voteYesCount = 0;
      totalCount = 0;
      _ref = popupParcel.nullOrCachedServices[popupParcel.serviceName].decisionPoints;
      for (pointName in _ref) {
        decisionPointsArray = _ref[pointName];
        if (decisionPointsArray[decisionPointsArray.length - 1].voteAgree) {
          voteYesCount++;
        }
        totalCount++;
      }
      return updateBadgeText(voteYesCount + '/' + totalCount);
    }
  };

  servicesReady = function(servicesIndex, forUrl) {
    var COMfrags, DOTfrags, currentTime, domainName, domainPreTLD, protocolFRAGS;
    currentTime = Date.now();
    COMfrags = forUrl.split('.com');
    if (forUrl.indexOf('wikipedia.org') !== -1) {
      COMfrags = forUrl.split('.org');
    }
    if (COMfrags.length > 1) {
      DOTfrags = COMfrags[COMfrags.length - 2].split('.');
      domainPreTLD = DOTfrags[DOTfrags.length - 1];
      protocolFRAGS = domainPreTLD.split('//');
      domainName = protocolFRAGS[protocolFRAGS.length - 1];
      if (servicesIndex.vanityHash[domainName] != null) {
        serviceMatchObj = {
          forUrl: forUrl,
          serviceMatch: true
        };
        return chrome.storage.local.get(null, function(allItems) {
          var servicesFullObj;
          if (allItems['servicesFull'] != null) {
            if ((allItems['servicesFull'][servicesIndex.vanityHash[domainName]] != null) && (currentTime - allItems['servicesFull'][servicesIndex.vanityHash[domainName]].timestamp) < 22100000) {
              serviceMatchObj = {
                forUrl: forUrl,
                serviceMatch: true
              };
              return servicesIndexAndServicesFullReady(servicesIndex, allItems['servicesFull'], servicesIndex.vanityHash[domainName], forUrl);
            } else {
              return updateService(allItems['servicesFull'], servicesIndex.vanityHash[domainName], forUrl, servicesIndexAndServicesFullReady, servicesIndex);
            }
          } else {
            servicesFullObj = {};
            return updateService(servicesFullObj, servicesIndex.vanityHash[domainName], forUrl, servicesIndexAndServicesFullReady, servicesIndex);
          }
        });
      } else {
        serviceMatchObj = {
          forUrl: forUrl,
          serviceMatch: false
        };
        if (popupOpen) {
          return messageMainView_noServiceMatch(tabUrl);
        }
      }
    } else {
      serviceMatchObj = {
        forUrl: forUrl,
        serviceMatch: false
      };
      if (popupOpen) {
        return messageMainView_noServiceMatch(tabUrl);
      }
    }
  };

  initialize = function(currentUrl) {
    var currentTime;
    updatesCountTest++;
    currentTime = Date.now();
    return chrome.storage.local.get(null, function(allItems) {
      if (allItems['services'] != null) {
        if ((currentTime - allItems['services'].timestamp) < 86400000) {
          return updateServicesIndex(currentUrl);
        } else {
          return reactor.dispatchEvent('deliverServices', {
            'services': services,
            'forUrl': currentUrl
          });
        }
      } else {
        return updateServicesIndex(currentUrl);
      }
    });
  };

  initIfNewURL = function() {
    popupOpen = false;
    return chrome.tabs.getSelected(null, function(tab) {
      return chrome.storage.local.get('persistentUrl', function(data) {
        var currentUrl;
        if (data.persistentUrl !== tab.url) {
          updateBadgeText('');
          chrome.storage.local.set({
            'persistentUrl': tab.url
          }, function() {});
        }
        currentUrl = tab.url;
        if (document.readyState !== 'complete' && currentUrl !== tabUrl) {
          tabUrl = currentUrl;
          return $(document).ready(function() {
            return initialize(currentUrl);
          });
        } else if (currentUrl !== tabUrl) {
          tabUrl = currentUrl;
          return initialize(currentUrl);
        }
      });
    });
  };

  chrome.tabs.onActivated.addListener(initIfNewURL);

  chrome.tabs.onUpdated.addListener(initIfNewURL);

  chrome.windows.onFocusChanged.addListener(initIfNewURL);

}).call(this);

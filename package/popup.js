// Generated by CoffeeScript 1.9.0
(function() {
  $(document).ready(function() {
    var addTargetAttribute, backupView, backupViewElsToUnbind, cachedVotedPoints, capitalizeFirstLetter, cleanupMainView, getRandom, historyViewElsToUnbind, htmlEntities, isProbablyAUrl, mainViewElsToUnbind, port, prepViewData, receiveParcel, recentlyVotedPoints, renderExtensionHeight, renderHistoryView, renderMainView, renderedBool, sendParcel, thisPoint, userVotes, viewElementId;
    recentlyVotedPoints = [];
    cachedVotedPoints = [];
    viewElementId = '';
    renderedBool = false;
    userVotes = function(userAgreedBool, serviceName, pointId) {
      var parcel;
      parcel = {
        'msg': 'post_userVote',
        'userAgreedBool': userAgreedBool,
        'serviceName': serviceName,
        'pointId': pointId
      };
      return sendParcel(parcel);
    };
    backupViewElsToUnbind = [];
    backupView = function(viewData, backPointId) {
      var UIbarHtmlString, data, dataPretty, el, el_backPointId, _i, _len;
      for (_i = 0, _len = backupViewElsToUnbind.length; _i < _len; _i++) {
        el = backupViewElsToUnbind[_i];
        el.unbind();
      }
      backupViewElsToUnbind = [];
      $('#backupView').children().unbind();
      viewElementId = 'backupView';
      $("#backupView").css('display', 'block');
      $("#pointSummaryView").css('display', 'none');
      $("#historyView").css('display', 'none');
      $('#backupView').html("");
      UIbarHtmlString = '';
      if (viewData.popupParcel.nullOrCachedServices != null) {
        dataPretty = "text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(viewData.popupParcel.nullOrCachedServices, null, 2));
        data = "text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(viewData.popupParcel.nullOrCachedServices));
        UIbarHtmlString += '<a id="clickJSON" href="data:' + dataPretty + '" download="tosdr-term-opinions.json">Click here to export formatted data.</a><br><br>';
        UIbarHtmlString += '<a id="clickJSON" href="data:' + data + '" download="tosdr-term-opinions.json">Click here to export raw data.</a>';
      } else {
        UIbarHtmlString += "You haven't reviewed any terms.";
      }
      UIbarHtmlString += '<table class="pointListItem" style="text-align: left; width: 100%; margin-top:5px; margin-bottom:10px;" border="0" cellpadding="0" cellspacing="0"><tbody><tr>';
      UIbarHtmlString += '<td style="padding:10px; vertical-align: top; text-align: center; width: 100%;" class="backPointId" data-pointid="' + backPointId + '"><button class="btn" style="font-size: 1em;background-color: rgb(232, 249, 255);padding:3px;"> back </button></td>';
      UIbarHtmlString += '</tr></tbody></table>';
      $('#backupView').html(UIbarHtmlString);
      el_backPointId = $('.backPointId');
      backupViewElsToUnbind.push(el_backPointId);
      return $('.backPointId').bind('click', function(ev) {
        $('#pointSummaryView').children().unbind();
        return renderMainView(viewData, $(ev.currentTarget).data('pointid'));
      });
    };
    historyViewElsToUnbind = [];
    renderHistoryView = function(viewData, backPointId) {
      var UIbarHtmlString, agreeLable, agreedClass, cachedVotedPointsArray, el, el_clearService, el_exportData, el_historyPointId, htmlString, pointId, pointItem, pointItemsHtmlString, renderHtmlString, _i, _len, _ref, _ref1;
      for (_i = 0, _len = historyViewElsToUnbind.length; _i < _len; _i++) {
        el = historyViewElsToUnbind[_i];
        el.unbind();
      }
      historyViewElsToUnbind = [];
      viewElementId = 'summaryView';
      $("#backupView").css('display', 'none');
      $("#pointSummaryView").css('display', 'none');
      $("#historyView").css('display', 'block');
      $('#historyView').children().unbind();
      $('#historyView').html("<span id='votedOnKeys'> </span>");
      pointItemsHtmlString = '';
      _ref = viewData.cachedVotedPoints;
      for (pointId in _ref) {
        cachedVotedPointsArray = _ref[pointId];
        pointItem = _.last(cachedVotedPointsArray);
        if (pointItem.voteAgree) {
          agreedClass = 'agreed';
          agreeLable = 'btn-success';
          htmlString = ' fair ';
        } else {
          agreedClass = 'disagreed';
          agreeLable = 'btn-danger';
          htmlString = 'unfair';
        }
        pointItemsHtmlString += '<div class="historyPointId pointListItem ' + agreedClass + '" data-pointid="' + pointItem.canonical.id + '">';
        pointItemsHtmlString += '<button type="button" class="btn ' + agreeLable + ' userDecision">' + htmlString + '</button>';
        pointItemsHtmlString += '<div class="pointTitle">' + pointItem.canonical.title;
        pointItemsHtmlString += '</div>';
        pointItemsHtmlString += '</div>';
      }
      _ref1 = viewData.toVotePoints;
      for (pointId in _ref1) {
        pointItem = _ref1[pointId];
        pointItemsHtmlString += '<div class="historyPointId pointListItem undecidedItem" data-pointid="' + pointItem.id + '">';
        pointItemsHtmlString += '<button type="button" class="btn userDecision"> undecided </button>';
        pointItemsHtmlString += '<div class="pointTitle">' + pointItem.title;
        pointItemsHtmlString += '</div>';
        pointItemsHtmlString += '</div>';
      }
      UIbarHtmlString = '';
      UIbarHtmlString += '<table class="pointListItem" style="text-align: left; width: 100%; margin-top:5px; margin-bottom:10px;" border="0" cellpadding="0" cellspacing="0"><tbody><tr>';
      UIbarHtmlString += '<td style="padding:10px; vertical-align: top; text-align: center; width: 33%;" class="historyPointId" data-pointid="' + backPointId + '"><button class="btn" style="font-size: 1em;background-color: rgb(232, 249, 255);padding:3px;"> back </button></td>';
      UIbarHtmlString += '<td style="padding:10px; vertical-align: top; text-align: center; width: 34%;"><button class="btn" style="font-size: 1em;background-color: rgb(232, 249, 255);padding:3px;" id="exportData"> export <span style="font-size:0.8em;">&darr;</span> </button></td>';
      UIbarHtmlString += '<td style="padding:10px; vertical-align: top; text-align: center; width: 33%;" id="clearService"><button class="btn" style="font-size: 1em;background-color: rgb(232, 249, 255);padding:3px;"> clear </button></td>';
      UIbarHtmlString += '</tr></tbody></table>';
      renderHtmlString = '';
      if (Object.keys(viewData.cachedVotedPoints).length + Object.keys(viewData.toVotePoints).length > 7) {
        renderHtmlString = UIbarHtmlString + pointItemsHtmlString;
      } else {
        renderHtmlString = pointItemsHtmlString + UIbarHtmlString;
      }
      $('#votedOnKeys').html(renderHtmlString);
      el_historyPointId = $('.historyPointId');
      historyViewElsToUnbind.push(el_historyPointId);
      $('.historyPointId').bind('click', function(ev) {
        $('#pointSummaryView').children().unbind();
        return renderMainView(viewData, $(ev.currentTarget).data('pointid'));
      });
      el_clearService = $('#clearService');
      historyViewElsToUnbind.push(el_clearService);
      $('#clearService').bind('click', function(ev) {
        var sendObj;
        sendObj = {
          msg: 'post_clearService',
          serviceName: viewData.serviceInfo.serviceName
        };
        return sendParcel(sendObj);
      });
      el_exportData = $('#exportData');
      historyViewElsToUnbind.push(el_exportData);
      $('#exportData').bind('click', function(ev) {
        return backupView(viewData, backPointId);
      });
      $('body').removeAttr('style');
      $('html').removeAttr('style');
      renderExtensionHeight('historyView', 1);
      return $($('a')[0]).blur();
    };
    mainViewElsToUnbind = [];
    cleanupMainView = function() {
      $('#credits-attributions-box').hide();
      return $('#share-box-textarea').hide();
    };
    renderMainView = function(viewData, specificPointId) {
      var allPointIds, cellCount, cellWidth, contributor, creditsBoxHtmlString, creditsHtmlString, el, el_closeCreditsAttributionsBox, el_closeShareBoxTextarea, el_creditsAttributionsBox, el_goToHistoryView, el_goToNext, el_noDrop, el_openCreditsAttributionsBox, el_openShareBoxTextarea, el_yesDrop, href, index, link, linkName, linkObj, linkType, permaPointUrl, point, pointHtmlString, pointId, pointStatsHtml, prefLengthPointIds, preferAbleTldrLengthPointHash, randIndex, remainingPoints, renderPoint, serviceCapped, serviceHtmlString, shareBlobString, shareHtmlString, specificPoint, toVotePointIds, voteHtmlString, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2, _ref3, _ref4;
      if (specificPointId == null) {
        specificPointId = null;
      }
      $('#pointSummaryView').children().unbind();
      for (_i = 0, _len = mainViewElsToUnbind.length; _i < _len; _i++) {
        el = mainViewElsToUnbind[_i];
        el.unbind();
      }
      mainViewElsToUnbind = [];
      viewElementId = 'pointSummaryView';
      serviceCapped = capitalizeFirstLetter(viewData.serviceInfo.serviceName);
      $("#pointSummaryView").css('display', 'block');
      $("#historyView").css('display', 'none');
      $("#backupView").css('display', 'none');
      toVotePointIds = Object.keys(viewData.toVotePoints);
      if ((specificPointId != null) && (viewData.cachedVotedPoints[specificPointId] != null)) {
        specificPoint = viewData.popupParcel.servicesFull[viewData.popupParcel.serviceName].service.pointsData[specificPointId];
        renderPoint = thisPoint(specificPoint, _.last(viewData.cachedVotedPoints[specificPointId]));
      } else if ((specificPointId != null) && (viewData.toVotePoints[specificPointId] != null)) {
        renderPoint = thisPoint(viewData.toVotePoints[specificPointId]);
      } else {
        if (toVotePointIds.length < 2) {
          randIndex = 0;
          renderPoint = thisPoint(viewData.toVotePoints[toVotePointIds[randIndex]]);
        } else {
          preferAbleTldrLengthPointHash = {};
          if (renderedBool === false) {
            _ref = viewData.toVotePoints;
            for (pointId in _ref) {
              point = _ref[pointId];
              if (point.tosdr.tldr.length < 380 && point.tosdr.tldr.length > 10) {
                preferAbleTldrLengthPointHash[pointId] = point;
              }
            }
            if (Object.keys(preferAbleTldrLengthPointHash).length < 2) {
              randIndex = getRandom(0, toVotePointIds.length - 1);
              renderPoint = thisPoint(viewData.toVotePoints[toVotePointIds[randIndex]]);
            } else {
              prefLengthPointIds = Object.keys(preferAbleTldrLengthPointHash);
              randIndex = getRandom(0, prefLengthPointIds.length - 1);
              renderPoint = thisPoint(preferAbleTldrLengthPointHash[prefLengthPointIds[randIndex]]);
            }
          } else {
            randIndex = getRandom(0, toVotePointIds.length - 1);
            renderPoint = thisPoint(viewData.toVotePoints[toVotePointIds[randIndex]]);
          }
        }
      }
      allPointIds = _.union(Object.keys(viewData.cachedVotedPoints), toVotePointIds);
      remainingPoints = _.without(allPointIds, renderPoint.id);
      renderedBool = true;
      shareBlobString = '';
      shareBlobString += renderPoint.title + "&#13;&#10;&#13;&#10;";
      $("#landingTitle").html(renderPoint.title);
      permaPointUrl = 'https://tosdr.org/?servicePoint=' + viewData.serviceInfo.serviceName + '__' + renderPoint.id;
      shareBlobString += "Permalink: " + permaPointUrl + "&#13;&#10;&#13;&#10;";
      if ((renderPoint.tldr != null) && renderPoint.tldr !== renderPoint.title) {
        shareBlobString += "Summary:" + renderPoint.tldr + "&#13;&#10;&#13;&#10;";
        $("#landingSummary #textDropLanding").html(renderPoint.tldr);
      }
      if (viewData.serviceInfo.twitter != null) {
        shareBlobString += serviceCapped + " on Twitter: " + viewData.serviceInfo.twitter + "&#13;&#10;&#13;&#10;";
      }
      pointHtmlString = '';
      cellCount = 0;
      if (renderPoint.discussion != null) {
        cellCount++;
        pointHtmlString += '<td class="linkTableCell variableWidthCell">';
        pointHtmlString += "<a target='_blank' href='" + renderPoint.discussion + "' title='" + renderPoint.discussion + "'> discuss </a>";
        pointHtmlString += '</td>';
        shareBlobString += "Discussion on Google Groups: " + renderPoint.discussion + "&#13;&#10;&#13;&#10;";
      }
      if (renderPoint.source != null) {
        if (_.isArray(renderPoint.source)) {
          _ref1 = renderPoint.source;
          for (index = _j = 0, _len1 = _ref1.length; _j < _len1; index = ++_j) {
            link = _ref1[index];
            if (isProbablyAUrl(link)) {
              cellCount++;
              pointHtmlString += '<td class="linkTableCell variableWidthCell">';
              pointHtmlString += "<a target='_blank' href='" + link + "' title='" + link + "' > link " + (index + 1) + " </a>";
              pointHtmlString += '</td>';
              shareBlobString += "Link " + (index + 1) + ": " + link + "&#13;&#10;";
            }
          }
        } else if (_.isObject(renderPoint.source)) {
          _ref2 = renderPoint.source;
          for (linkName in _ref2) {
            href = _ref2[linkName];
            if (isProbablyAUrl(href)) {
              cellCount++;
              pointHtmlString += '<td class="linkTableCell variableWidthCell">';
              pointHtmlString += "<a target='_blank' href='" + href + "' title='" + href + "'> " + linkName + " </a>";
              pointHtmlString += '</td>';
              shareBlobString += linkName + ": " + href + "&#13;&#10;";
            }
          }
        }
      }
      cellCount++;
      shareHtmlString = '<td class="linkTableCell variableWidthCell">';
      shareHtmlString += '<div id="share-button">';
      shareHtmlString += '<button class="btn" id="open-share-box-textarea" style="font-size: 1em;background-color: rgb(232, 249, 255);padding:3px;margin-top:2px;" > <img src="/shareSpritesPNG.png" alt="copy" /> </button>';
      shareHtmlString += '</div>';
      shareHtmlString += '</td>';
      cellCount++;
      pointHtmlString += shareHtmlString;
      cellWidth = parseInt(100 / cellCount);
      if (pointHtmlString !== '') {
        pointHtmlString = '<table class="slotMain" border="0" cellpadding="0" cellspacing="0"><tbody><tr>' + pointHtmlString;
        pointHtmlString += '</tr></tbody></table>';
      }
      $('#pointDropBox').html(pointHtmlString);
      $('.variableWidthCell').css('width', cellWidth + '%');
      serviceHtmlString = '<span style="font-size: 1.2em;line-height: 2.3em;"> <b>' + serviceCapped + "</b></span><br>";
      if (viewData.serviceInfo.twitter != null) {
        serviceHtmlString += "<a target='_blank' href='https://twitter.com/" + viewData.serviceInfo.twitter + "' > " + viewData.serviceInfo.twitter + " </a> <br>";
      }
      if (viewData.serviceInfo.links != null) {
        shareBlobString += "&#13;&#10;";
        shareBlobString += serviceCapped + ": &#13;&#10;";
        _ref3 = viewData.serviceInfo.links;
        for (linkType in _ref3) {
          linkObj = _ref3[linkType];
          if (isProbablyAUrl(linkObj.url)) {
            serviceHtmlString += "<a target='_blank' href='" + linkObj.url + "' > " + linkObj.name + " </a> <br>";
          }
          shareBlobString += linkObj.name + ": " + linkObj.url + " &#13;&#10;";
        }
      }
      shareBlobString += "Service summary for " + viewData.serviceInfo.serviceName + ": " + "https://tosdr.org/index.html?service=" + viewData.serviceInfo.serviceName + " &#13;&#10;";
      serviceHtmlString += "<br><a class='btn' style='font-size: 1em;background-color: rgb(232, 249, 255); font-color:black;' target='_blank' href='https://tosdr.org/index.html?service=" + viewData.serviceInfo.serviceName + "' > service overview </a> <br>";
      $('#serviceDropBox').html(serviceHtmlString);
      creditsHtmlString = '';
      creditsHtmlString += "<br><a target='_blank' href='https://tosdr.org/get-involved.html' ><strong>Get involved!</strong><br>Submit a point, update information, more!</a> <br><br>";
      creditsHtmlString += "<span id='open-credits-attributions-box' style='color:blue;2'>credits</span> <br>";
      $("#creditsDropBox").html(creditsHtmlString);
      shareBlobString = '<button class="btn" id="close-share-box-textarea" style="float:right;margin-bottom: 10px;"> close </button><textarea>' + shareBlobString + '</textarea>';
      shareBlobString = "<span style='position: relative;font-size: 1.3em;top: 4px;'>Here's a start! Shareable text:</span> " + shareBlobString;
      $("#share-box-textarea").html(shareBlobString);
      el_openCreditsAttributionsBox = $('#open-credits-attributions-box');
      el_creditsAttributionsBox = $('#credits-attributions-box');
      el_openCreditsAttributionsBox.bind('click', function(ev) {
        if (el_creditsAttributionsBox.css('display') === 'none') {
          return el_creditsAttributionsBox.show(700);
        } else {
          return el_creditsAttributionsBox.hide(700);
        }
      });
      mainViewElsToUnbind.push(el_openCreditsAttributionsBox);
      el_openShareBoxTextarea = $('#open-share-box-textarea');
      el_openShareBoxTextarea.bind('click', function(ev) {
        if ($('#share-box-textarea').css('display') === 'none') {
          return $('#share-box-textarea').show(700);
        } else {
          return $('#share-box-textarea').hide(700);
        }
      });
      el_closeShareBoxTextarea = $('#close-share-box-textarea');
      el_closeShareBoxTextarea.bind('click', function(ev) {
        return $('#share-box-textarea').hide(700);
      });
      mainViewElsToUnbind.push(el_closeShareBoxTextarea);
      creditsBoxHtmlString = '';
      creditsBoxHtmlString += '<button class="btn" id="close-credits-attributions-box" style="float:right; margin-bottom: 10px;"> close </button>';
      if (renderPoint.meta != null) {
        if (renderPoint.meta['author'] != null) {
          creditsBoxHtmlString += "<strong>Summary author</strong>: " + htmlEntities(renderPoint.meta['author']) + "<br>";
        }
        if ((renderPoint.meta['contributors'] != null) && renderPoint.meta['contributors'].length > 0) {
          if (renderPoint.meta['contributors'].length === 1) {
            creditsBoxHtmlString += "<strong>Contributor</strong>: " + htmlEntities(renderPoint.meta['contributors'][0]) + "<br>";
          } else {
            creditsBoxHtmlString += "<strong>Contributors</strong>: <br>";
            _ref4 = renderPoint.meta['contributors'];
            for (_k = 0, _len2 = _ref4.length; _k < _len2; _k++) {
              contributor = _ref4[_k];
              creditsBoxHtmlString += htmlEntities(contributor) + "<br>";
            }
          }
        }
        if (renderPoint.meta['license-for-this-file'] != null) {
          creditsBoxHtmlString += "<strong>License for summary file</strong>: " + htmlEntities(renderPoint.meta['license-for-this-file']) + "<br>";
        }
      }
      creditsBoxHtmlString += '<br><ul>';
      creditsBoxHtmlString += "<li><a target='_blank' href='https://tosdr.org/about.html' > about TOS;DR - <strong>terms of service; didn't read</strong></a></li> <br>";
      creditsBoxHtmlString += "<li><a target='_blank' href='https://github.com/tosdr/tosdr.org/graphs/contributors' >code contributors to TOS;DR web service</a></li> <br>";
      creditsBoxHtmlString += "<li><a target='_blank' href='https://eff.org' >EFF</a> and <a target='_blank' href='https://www.internetsociety.org/' >Internet Society</a> collaborate with TOS;DR on <a target='_blank' href='https://tosback.org/' >TOSBack</a>, a service which aims to provide greater reliability and coverage in term summaries.</li> <br>";
      creditsBoxHtmlString += "<li><a target='_blank' href='https://www.flickr.com/photos/darwinbell/314088675/in/faves-56737858@N04/' > broccoli's logo image </a></li> <br>";
      creditsBoxHtmlString += "<li>broccoli <a target='_blank' href='https://github.com/sdailey/broccoli' >github</a>, <a target='_blank' href='https://twitter.com/spencenow' >author</a></li><br>";
      creditsBoxHtmlString += "<li>buttons' styling was inspired by <a target='_blank' href='http://getbootstrap.com/' >bootstrap</a></li><br>";
      creditsBoxHtmlString += "</ul>";
      $('#credits-attributions-box').html(creditsBoxHtmlString);
      el_closeCreditsAttributionsBox = $('#close-credits-attributions-box');
      el_closeCreditsAttributionsBox.bind('click', function(ev) {
        return $('#credits-attributions-box').hide(600);
      });
      mainViewElsToUnbind.push(el_closeCreditsAttributionsBox);
      voteHtmlString = '<button id="yes-' + renderPoint.id + '" class="btn" > yes </button>';
      $("#yesDrop").html(voteHtmlString);
      voteHtmlString = '<button id="no-' + renderPoint.id + '" class="btn" > no </button>';
      $("#noDrop").html(voteHtmlString);
      $(".voteYes button").removeAttr('style');
      $(".voteNo button").removeAttr('style');
      el_noDrop = $('#noDrop');
      mainViewElsToUnbind.push(el_noDrop);
      el_yesDrop = $('#yesDrop');
      mainViewElsToUnbind.push(el_yesDrop);
      if (renderPoint.voteAgree != null) {
        if (renderPoint.voteAgree) {
          $(".voteYes button").css('background-color', 'rgb(110, 226, 110)');
          el_noDrop.bind('click', function(ev) {
            userVotes(false, viewData.serviceInfo.serviceName, renderPoint.id);
            return cleanupMainView();
          });
        } else {
          $(".voteNo button").css('background-color', 'rgba(255, 19, 19, 0.71)');
          el_yesDrop.bind('click', function(ev) {
            userVotes(true, viewData.serviceInfo.serviceName, renderPoint.id);
            return cleanupMainView();
          });
        }
      } else {
        $('#yesDrop').bind('click', function(ev) {
          userVotes(true, viewData.serviceInfo.serviceName, renderPoint.id);
          return cleanupMainView();
        });
        $('#noDrop').bind('click', function(ev) {
          return userVotes(false, viewData.serviceInfo.serviceName, renderPoint.id);
        });
      }
      if (remainingPoints.length > 0) {
        el_goToNext = $('#goToNext');
        mainViewElsToUnbind.push(el_goToNext);
        $('#goToNext').bind('click', function(ev) {
          if (remainingPoints.length < 2) {
            randIndex = 0;
          } else {
            randIndex = getRandom(0, remainingPoints.length - 1);
          }
          $('#pointSummaryView').children().unbind();
          cleanupMainView();
          return renderMainView(viewData, remainingPoints[randIndex]);
        });
      } else {
        $('#goToNext').remove();
      }
      el_goToHistoryView = $('.goToHistoryView');
      mainViewElsToUnbind.push(el_goToHistoryView);
      el_goToHistoryView.bind('click', function(ev) {
        $('#historyView').children().unbind();
        $('credits-attributions-box').remove();
        $('share-box-textarea').remove();
        return renderHistoryView(viewData, renderPoint.id);
      });
      $('body').removeAttr('style');
      pointStatsHtml = '';
      pointStatsHtml += allPointIds.length + ' points total. <br>';
      pointStatsHtml += Object.keys(viewData.toVotePoints).length + ' left to review.';
      $("#pointStats").html(pointStatsHtml);
      setTimeout(function() {
        renderExtensionHeight('pointSummaryView', 1);
        $($('a')[0]).blur();
        return $($('button')[0]).blur();
      }, 300);
      $($('a')[0]).blur();
      $($('button')).blur();
      return true;
    };
    receiveParcel = function(parcel) {
      if (parcel.msg == null) {
        return false;
      }
      switch (parcel.msg) {
        case 'popupParcel_ready':
          return chrome.tabs.getSelected(null, function(tab) {
            var randIndex, viewData, votedPointIds;
            if (tab.url === parcel.forUrl) {
              viewData = prepViewData(parcel.popupParcel);
              if (Object.keys(viewData.toVotePoints).length === 0 && Object.keys(viewData.cachedVotedPoints).length > 0) {
                if (Object.keys(viewData.cachedVotedPoints) < 2) {
                  randIndex = 0;
                } else {
                  randIndex = getRandom(0, Object.keys(viewData.cachedVotedPoints).length - 1);
                }
                votedPointIds = Object.keys(viewData.cachedVotedPoints);
                renderMainView(viewData, votedPointIds[randIndex]);
              } else {
                renderMainView(viewData, null);
              }
              return $("#landingStatusBox").html('Summaries available! :)');
            }
          });
        case 'noServiceMatch':
          $('body').removeAttr('style');
          return $("body").html("<div style='width:380px;'>No summaries available for service. <a target='_blank' href='https://tosdr.org/get-involved.html' >Get involved to help change that!</a></div>");
        case 'popupParcel_pending':
          console.log("when 'popupparcel_pending'");
          return $("#landingStatusBox").html('Trying to fetch service details...');
      }
    };
    prepViewData = function(popupParcel) {
      var decisionPointArray, lastVotedPoint, pointId, serviceCache, serviceName, toVotePoints, viewData;
      serviceName = popupParcel.serviceName;
      if ((popupParcel.nullOrCachedServices != null) && (popupParcel.nullOrCachedServices[serviceName] != null) && (popupParcel.nullOrCachedServices[serviceName].decisionPoints != null)) {
        cachedVotedPoints = popupParcel.nullOrCachedServices[serviceName].decisionPoints;
      }
      toVotePoints = popupParcel.pointsToVoteOn;
      if (Object.keys(cachedVotedPoints).length > 0) {
        lastVotedPoint = {
          timestamp: 0,
          pointId: ''
        };
        for (pointId in cachedVotedPoints) {
          decisionPointArray = cachedVotedPoints[pointId];
          if (_.last(decisionPointArray).timestamp > lastVotedPoint.timestamp) {
            lastVotedPoint.pointId = pointId;
            lastVotedPoint.timestamp = _.last(decisionPointArray).timestamp;
          }
        }
      } else {
        lastVotedPoint = null;
      }
      if ((popupParcel.nullOrCachedServices != null) && (popupParcel.nullOrCachedServices[popupParcel.serviceName] != null)) {
        serviceCache = popupParcel.nullOrCachedServices[popupParcel.serviceName];
      } else {
        serviceCache = null;
      }
      viewData = {
        'serviceInfo': {
          'serviceName': popupParcel.serviceName
        },
        'cachedVotedPoints': cachedVotedPoints,
        'toVotePoints': toVotePoints,
        'serviceCache': serviceCache,
        'popupParcel': popupParcel,
        'lastVotedPoint': lastVotedPoint
      };
      if (popupParcel.servicesFull[popupParcel.serviceName].service.twitter != null) {
        viewData.serviceInfo.twitter = popupParcel.servicesFull[popupParcel.serviceName].service.twitter;
      }
      if (popupParcel.servicesFull[popupParcel.serviceName].service.links != null) {
        viewData.serviceInfo.links = popupParcel.servicesFull[popupParcel.serviceName].service.links;
      }
      return viewData;
    };
    addTargetAttribute = function(rawTldr) {
      var frag, fragsA, rebuiltTldr, _i, _len;
      if (rawTldr.indexOf('target=') === -1 && rawTldr.indexOf('<a ') !== -1) {
        fragsA = rawTldr.split('<a ');
        rebuiltTldr = '';
        for (_i = 0, _len = fragsA.length; _i < _len; _i++) {
          frag = fragsA[_i];
          if (frag.length > 0) {
            rebuiltTldr += frag + "<a target='_blank' ";
          }
        }
        return rebuiltTldr;
      } else {
        return rawTldr;
      }
    };
    thisPoint = function(point, optionalDecisionPointCompanion) {
      var tldr, viewPoint;
      if (optionalDecisionPointCompanion == null) {
        optionalDecisionPointCompanion = null;
      }
      tldr = addTargetAttribute(point.tosdr.tldr);
      viewPoint = {};
      if (optionalDecisionPointCompanion != null) {
        viewPoint.voteAgree = optionalDecisionPointCompanion.voteAgree;
        viewPoint.shared = optionalDecisionPointCompanion.shared;
      }
      viewPoint.id = point.id;
      viewPoint.tldr = tldr;
      viewPoint.title = point.title;
      if (point.discussion != null) {
        viewPoint.discussion = point.discussion;
      }
      if ((point.meta != null) && Object.keys(point.meta).length > 0) {
        viewPoint.meta = point.meta;
      }
      if (point.source != null) {
        if (_.isObject(point.source)) {
          viewPoint.source = point.source;
        } else {
          viewPoint.source = {};
          viewPoint.source['source'] = point.source;
        }
      }
      return viewPoint;
    };
    port = chrome.extension.connect({
      name: "fromPopupToBackground"
    });
    sendParcel = function(parcel) {
      return chrome.tabs.getSelected(null, function(tab) {
        var popupParcel, toVotePoints;
        parcel.forUrl = tab.url;
        if (parcel.msg == null) {
          return false;
        }
        switch (parcel.msg) {
          case 'post_userVote':
            return port.postMessage(parcel);
          case 'request_popupParcel':
            return port.postMessage(parcel);
          case 'post_clearService':
            cachedVotedPoints = {};
            toVotePoints = {};
            popupParcel = {};
            return port.postMessage(parcel);
        }
      });
    };
    chrome.extension.onConnect.addListener(function(port) {
      if (port.name === 'fromBackgroundToPopup') {
        return port.onMessage.addListener(function(pkg) {
          return receiveParcel(pkg);
        });
      }
    });
    sendParcel({
      'msg': 'request_popupParcel'
    });
    getRandom = function(min, max) {
      return min + Math.floor(Math.random() * (max - min + 1));
    };
    renderExtensionHeight = function(elementId, extraPx) {
      var extHeight_;
      if (viewElementId === elementId) {
        extraPx = 2;
        extHeight_ = $('#' + elementId).outerHeight() + extraPx;
        $('body').css('height', extHeight_ + 'px');
        heightString = extHeight_.toString() +'px';
        $('html').css('min-height', heightString);
        extHeight_--;
        return $('body').css('min-height', heightString);
      }
    };
    capitalizeFirstLetter = function(string) {
      return string.charAt(0).toUpperCase() + string.slice(1);
    };
    htmlEntities = function(str) {
      return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
    };
    return isProbablyAUrl = function(s) {
      if (s.indexOf('http') !== -1) {
        return true;
      }
      if (s.indexOf('.com') !== -1) {
        return true;
      }
      if (s.indexOf('.net') !== -1) {
        return true;
      }
      if (s.indexOf('.org') !== -1) {
        return true;
      }
      if (s.indexOf('.us') !== -1) {
        return true;
      }
      if (s.indexOf('.de') !== -1) {
        return true;
      }
      if (s.indexOf('.fr') !== -1) {
        return true;
      }
      if (s.indexOf('.uk') !== -1) {
        return true;
      }
      if (s.indexOf('.cn') !== -1) {
        return true;
      }
      if (s.indexOf('www.') !== -1) {
        return true;
      }
      if (s.indexOf(' ') !== -1) {
        return false;
      }
      if (s.indexOf('/') !== -1 && s.indexOf('.') !== -1) {
        return true;
      }
      return false;
    };
  });

}).call(this);
